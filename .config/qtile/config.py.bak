
import os
import subprocess
import psutil
from libqtile import bar, layout, widget, hook, qtile
from libqtile.config import Click, Drag, Group, Key, Match, Screen, KeyChord
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
# from libqtile.command import lazy
from qtile_extras import widget
from qtile_extras.widget.decorations import RectDecoration 

mod = "mod4"

scrot = "home/marco/Pictures/Screenshots/%Y-%m-%d-%H%M%S.png"
terminal = "kitty"
file_browser = "thunar"
browser = "firefox"

# gamma values to use as nightlight (n) and daylight (d)
n = {
    "r": "0.95", 
    "g": "0.85",
    "b": "0.90", 
}
d = {
    "r": "0.95", 
    "g": "0.95",
    "b": "0.95", 
}

keys = [Key(key[0], key[1], *key[2:]) for key in [

    # Switch between windows in current stack pane
    ([mod], "j", lazy.layout.down()),
    ([mod], "k", lazy.layout.up()),
    ([mod], "h", lazy.layout.left()),
    ([mod], "l", lazy.layout.right()),
    ([mod], "space", lazy.layout.next()),

    # Change window sizes (MonadTall)
    ([mod, "shift"], "l", lazy.layout.grow()),
    ([mod, "shift"], "h", lazy.layout.shrink()),

    # Reset layout
    ([mod], "n", lazy.layout.normalize()),

    # Toggle floating
    ([mod, "shift"], "f", lazy.window.toggle_floating()),

    # Toggle fullscreen
    ([mod], "f", lazy.window.toggle_fullscreen()),

    # Move windows up or down in current stack
    ([mod, "shift"], "j", lazy.layout.shuffle_down()),
    ([mod, "shift"], "k", lazy.layout.shuffle_up()),

    # Toggle between different layouts
    ([mod], "Tab", lazy.next_layout()),
    ([mod, "shift"], "Tab", lazy.prev_layout()),

    # Kill window
    ([mod], "w", lazy.window.kill()),

    # Switch focus of monitors
    ([mod], "semicolon", lazy.next_screen()),
    ([mod], "comma", lazy.prev_screen()),

    # Restart Qtile
    ([mod, "control"], "r", lazy.restart()),

    # Quit Qtile
    ([mod, "control"], "q", lazy.shutdown()),

    # Spawn command using a prompt widget
    ([mod], "r", lazy.spawncmd()),

    # Show applications menu
    ([mod], "m", lazy.spawn("rofi -show drun")),

    # Window Nav
    ([mod, "shift"], "m", lazy.spawn("rofi -show")),

    # Browser
    ([mod], "b", lazy.spawn(browser)),

    # File Explorer
    ([mod], "e", lazy.spawn(file_browser)),

    # Terminal
    ([mod], "t", lazy.spawn(terminal)),

    # Nightlight (dependencies: x11-xserver-utils (debian) )
    ([mod, "shift"], "n", lazy.spawn(
        f"xgamma -rgamma {n["r"]} -ggamma {n["g"]} -bgamma {n["b"]}"
    )),

    # Daylight (dependencies: x11-xserver-utils (debian) )
    ([mod, "shift"], "d", lazy.spawn(
        f"xgamma -rgamma {d["r"]} -ggamma {d["g"]} -bgamma {d["b"]}"
    )),
]]
keys.extend(
    [ # TODO:check: Key([], "Print", lazy.spawn("scrot /home/piyush/Pictures/Screenshot-%d-%m-%Y_%H:%M:%S_$wx$h.png -e 'xclip -selection clipboard -t image/png -i $f'"), desc="Print screen and copy to clipboard"),
        # Screenshots
        KeyChord([mod], "s", [
            # dependencies: scrot, flameshot
            Key(key[0], key[1], *key[2:]) for key in [
                # Screenshot by selection or rectangle
                ([], "s", lazy.spawn(f"scrot -s {scrot}")),
                # Screenshot with highlighted area
                ([], "h", lazy.spawn(f"scrot -shole {scrot}")),
                # Screenshot with blurred area
                ([], "b", lazy.spawn(f"scrot -sblur,30 {scrot}")),
                # Screenshot with Flameshot
                ([], "f", lazy.spawn("flameshot")),
            ]],
            name = 'Screenshot mode'
        ),
        # Volume
        KeyChord([mod], "v", [
            # dependencies: pulseaudio-utils
            Key(key[0], key[1], *key[2:]) for key in [
                ([], "j", lazy.spawn(
                    "pactl set-sink-volume @DEFAULT_SINK@ -5%"
                )),
                ([], "k", lazy.spawn(
                    "pactl set-sink-volume @DEFAULT_SINK@ +5%"
                )),
                ([], "m", lazy.spawn(
                    "pactl set-sink-mute @DEFAULT_SINK@ toggle"
                )),
            ]],
            mode = True,
            name = 'Adjust Volume'
        ),
    ]
)

groups = []
group_names = ["1", "2", "3", "4", "5", "6", "7", "8", "9",]

# group labels turn into icons with Awesome Font
# see:https://fontawesome.com/search?o=r&m=free&s=solid&f=classic
group_labels = ["HOME", "globe", "code", "folder-open", "envelope", "terminal", "cubes", "comments", "music",]

group_layouts = ["monadtall", "monadtall", "tile", "tile", "monadtall", "monadtall", "monadtall", "monadtall", "monadtall"]

for i in range(len(group_names)):
    groups.append(
        Group(
            name=group_names[i],
            layout=group_layouts[i].lower(),
            label=group_labels[i],
        ))
# groups = [
#     Group("1", label="HOME", layout="monadtall"),
#     Group("2", label="globe", layout="monadtall"),
#     Group("3", label="code", layout="monadtall"),
#     Group("4", label="terminal", layout="monadtall"),
#     Group("5", label="folder-open", layout="monadtall"),
#     Group("6", label="cubes", layout="monadtall"),
#     Group("7", label="comments", layout="monadtall"),
#     Group("8", label="envelope", layout="monadtall"),
#     Group("9", label="music", layout="monadtall"),
# ]

for i in groups:
    keys.extend(
        [
            # mod + group number = switch to group
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod + shift + group number = switch to & move focused window to group
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # mod + ctrl + group number = move focused window to group
            Key([mod, "control"], i.name, lazy.window.togroup(i.name),
                desc="move focused window to group {}".format(i.name)),
        ]
    )


layout_theme = {
    "border_width":1,
    "margin":15,
    "border_focus":"#a6e3a1",
    "border_normal":"#45475a",
}

layouts = [ 
    layout.MonadTall(**layout_theme),
    layout.Columns(**layout_theme),
    layout.Max(**layout_theme),
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
    # layout.Bsp(),
    # layout.Matrix(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    #layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]

floating_layout = layout.Floating(
    float_rules=[
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),
        Match(wm_class="makebranch"),
        Match(wm_class="maketag"),
        Match(wm_class="ssh-askpass"),
        Match(title="branchdialog"),
        Match(title="pinentry"),
    ],
    # border_focus=#003fff
)

widget_defaults = dict(
    font="Jetbrains mono NF",
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()


def base(fg="#45475a", bg="#1e1e2e"): 
    return {
        "foreground": fg,
        "background": bg,
    }

def separator():
    return widget.Sep(
        **base(),
        linewidth = 1,
        padding = 5,
    ),

def icon(
        text="?", 
        mouse_callbacks=None):
    return widget.TextBox(
        **base(fg="#708ed8"),
        text=text,
        font="Font Awesome 6 Free Solid",
        fontsize=17,
        padding=10
    )

def workspaces(): 
    return widget.GroupBox(
        **base(),
        font="Font Awesome 6 Free Solid",
        fontsize = 12,
        margin_y = 2,
        margin_x = 3,
        padding_y = 2,
        padding_x = 8,
        borderwidth = 0,
        disable_drag = False,
        active = "#6c7086",
        inactive = "#313244",
        rounded = False,
        highlight_method = "text",
        this_current_screen_border = "#cdd6f4",
    )

def spacer():
    return widget.Spacer(background="#1e1e2e")

def windowname():
    return widget.WindowName(
        font = "Jetbrains Mono Nerd Font Bold",
        fontsize = 12,
        foreground = "#cdd6f4",
        background = "#1e1e2e"
    )

def date():
    return widget.Clock(
        foreground = "#181825",
        background = "#1e1e2e",
        font = "Jetbrains Mono Nerd Font Bold",
        fontsize = 12,
        format = "%d/%m/%y",
        decorations = [
            RectDecoration (
                colour = "#a6e3a1",
                padding_y = 3,
                radius = 2,
                filled = True
            ),
        ],
    )

def time():
    return widget.Clock(
        foreground = "#181825",
        background = "#1e1e2e",
        font = "Jetbrains Mono Nerd Font Bold",
        fontsize = 12,
        format = "%H:%M:%S",
        decorations = [
            RectDecoration (
                colour = "#89b4fa",
                padding_y = 3,
                radius = 2,
                filled = True
            ),
        ],
    )

def current_layout():
    return widget.CurrentLayoutIcon(
        padding = 4,
        scale = 0.7,
        foreground = "#cdd6f4",
        background = "#1e1e2e"
    )

primary_widgets = [
    separator(),
    current_layout(),
    separator(),
    workspaces(),
    separator(),
    widget.Prompt(
        font = "Jetbrains Mono Nerd Font",
        fontsize = 12,
        background = "#1e1e2e",
        foreground = "#cdd6f4"
    ),
    spacer(),
    windowname(),
    separator(),
    widget.CPU(
        background = "#1e1e2e",
        foreground = "#181825",
        font = "Jetbrains Mono Nerd Font Bold",
        fontsize = 12,
        decorations = [
            RectDecoration (
                colour = "#f38ba8",
                padding_y = 3,
                radius = 2,
                filled = True
            ),
        ],),
    separator(),
    widget.Memory(
        measure_mem = 'G',
        foreground = "#181825",
        background = "#1e1e2e",
        font = "Jetbrains Mono Nerd Font Bold",
        fontsize = 12,
        format = 'RAM{MemUsed: .0f}{mm}/{MemTotal: .0f}{mm}',
        decorations = [
            RectDecoration (
                colour = "#fab387",
                padding_y = 3,
                radius = 2,
                filled = True
            ),
        ],),
    separator(),
    date(),
    separator(),
    time(),
    separator(),
    widget.Systray(
        background = "#1e1e2e",
        icon_size = 20,
        padding = 5,
    ),
    separator(),
    icon(text="⏻"), #, mouse_callbacks={"Button1": open_powermenu()}),
]

secondary_widgets = [
    separator(),
    current_layout(),
    separator(),
    workspaces(),
    separator(),
    spacer(),
    windowname(),
    separator(),
    date(),
    separator(),
    time(),
    separator(),
]

def count_monitors():
    connected_monitors = 1
    xrandr = "xrandr | grep -w 'connected' | cut -d ' ' -f 2 | wc -l"

    command = subprocess.run(
        xrandr,
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    if command.returncode != 0:
        error = command.stderr.decode("UTF-8")
        logger.error(f"Failed counting monitors using {xrandr}:\n{error}")
    else:
        connected_monitors = int(command.stdout.decode("UTF-8"))

    return connected_monitors

def status_bar(widgets):
    return bar.Bar(widgets, 28, opacity=0.75)

screens = [
    Screen(
        top=status_bar(primary_widgets),
    ),
]

monitors = count_monitors()
if monitors > 1:
    for _ in range(1, monitors):
        screens.append(
            Screen(
                top=status_bar(secondary_widgets)
            )
        )

mouse = [
    Drag(
        [mod],
        "Button1",
        lazy.window.set_position_floating(),
        start=lazy.window.get_position()
    ),
    Drag(
        [mod],
        "Button3",
        lazy.window.set_size_floating(),
        start=lazy.window.get_size()
    ),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
floats_kept_above = True
cursor_warp = False
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
